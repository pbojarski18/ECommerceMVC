@using ECommerceMVC.ViewModels
@model EditProductViewModel

<h2>Edit Product</h2>
<div class="d-flex flex-column col-6 justify-content-start align-items-center">
    <form method="post" asp-action="EditProduct" enctype="multipart/form-data">
        <input type="hidden" asp-for="EditProductDto.Id" />
        <div asp-validation-summary="ModelOnly" class="text-danger"></div>

        <div class="form-group col-12">
            <label>Product Subcategory:</label>
            <select id="subcategorySelect" class="form-control" asp-for="EditProductDto.ProductSubcategoryId" required>
                <option value="">Select a subcategory</option>
                @if (Model.Categories.SelectMany(p => p.Subcategories) != null)
                {
                    foreach (var subcategory in Model.Categories.SelectMany(p => p.Subcategories))
                    {
                        <option value="@subcategory.Id" class="@(subcategory.Id == Model.EditProductDto.ProductSubcategoryId ? "selected" : "")">@subcategory.Name</option>
                    }
                }
            </select>
        </div>

        <div class="form-group col-12">
            <label>Name:</label>
            <input type="text" asp-for="EditProductDto.Name" class="form-control" required />
            <span asp-validation-for="EditProductDto.Name" class="text-danger"></span>
        </div>

        <div class="form-group col-12">
            <label>Price:</label>
            <input type="number" asp-for="EditProductDto.Price" class="form-control" required />
            <span asp-validation-for="EditProductDto.Price" class="text-danger"></span>
        </div>

        <div class="form-group col-12">
            <label>Description:</label>
            <textarea asp-for="EditProductDto.Description" class="form-control"></textarea>
            <span asp-validation-for="EditProductDto.Description" class="text-danger"></span>
        </div>

        <div class="form-group col-12">
            <label>Upload Image:</label>
            <input type="text" asp-for="EditProductDto.ImagePath" hidden />
            <input type="file" name="file" id="fileInput" class="form-control" />

            @if (!string.IsNullOrEmpty(Model.EditProductDto.ImagePath))
            {
                <div>
                    <img src="@Url.Content(Model.EditProductDto.ImagePath)" alt="Current Image" width="200" />
                </div>
            }
        </div>

        <div class="form-group col-12">
            <label>Brand:</label>
            <input type="text" asp-for="EditProductDto.Brand" class="form-control" />
            <span asp-validation-for="EditProductDto.Brand" class="text-danger"></span>
        </div>

        <div id="productDetailsContainer">
            <h4>Product Details</h4>
            @for (int i = 0; i < Model.EditProductDto.Details.Count(); i++)
            {
                <div class="product-detail" id="productDetail_@i">
                    <input type="hidden" name="EditProductDto.Details[@i].Id" value="@Model.EditProductDto.Details[i].Id" />
                    <div class="form-group">
                        <label>Key:</label>
                        <input type="text" name="EditProductDto.Details[@i].Key" value="@Model.EditProductDto.Details[i].Key" class="form-control" />
                    </div>
                    <div class="form-group">
                        <label>Value:</label>
                        <input type="text" name="EditProductDto.Details[@i].Value" value="@Model.EditProductDto.Details[i].Value" class="form-control" />
                    </div>
                    <div class="form-group">
                        <label>Is Main:</label>
                        <input type="checkbox" name="EditProductDto.Details[@i].IsMain" value="true" @(Model.EditProductDto.Details[@i].IsMain ? "checked" : "") />
                        <input type="hidden" name="EditProductDto.Details[@i].IsMain" value="false" />
                    </div>
                    <div class="form-group">
                        <!-- Delete button outside of form -->
                        <button class="alert-danger delete-detail-button" type="button" data-detail-id="@Model.EditProductDto.Details[i].Id">
                            Delete
                        </button>
                    </div>
                </div>
            }
        </div>

        <button type="button" class="btn btn-secondary" id="addDetailButton">Add Product Detail</button>
        <button type="submit" class="btn btn-primary">Update Product</button>
    </form>
</div>

<!-- Delete form moved outside the main form -->
<form id="deleteDetailForm" method="post" asp-action="delete-by-id" style="display:none;">
    <input type="hidden" name="id" id="deleteDetailId" />
</form>

@section Scripts {
    <script>
        // Initialize the detail index based on the current count of product details
        let detailIndex = @Model.EditProductDto.Details.Count() - 1;

        // Call the function to populate subcategories on page load
        document.addEventListener('DOMContentLoaded', function () {
            populateSubcategories();
        });

        // Add event listener for adding new product detail
        document.getElementById('addDetailButton').addEventListener('click', function () {
            detailIndex++;  // Increment the detail index

            // Create a new container div for product detail
            var detailContainer = document.createElement('div');
            detailContainer.classList.add('product-detail');
            detailContainer.id = `productDetail_${detailIndex}`;

            // Create hidden ID input for new detail
            var idInput = document.createElement('input');
            idInput.type = 'hidden';
            idInput.name = `EditProductDto.Details[${detailIndex}].Id`;
            idInput.value = '0'; // Set to 0 for new detail

            // Create key input element
            var keyInput = document.createElement('input');
            keyInput.type = 'text';
            keyInput.name = `EditProductDto.Details[${detailIndex}].Key`;
            keyInput.classList.add('form-control');

            // Create value input element
            var valueInput = document.createElement('input');
            valueInput.type = 'text';
            valueInput.name = `EditProductDto.Details[${detailIndex}].Value`;
            valueInput.classList.add('form-control');

            // Create IsMain checkbox
            var isMainCheckbox = document.createElement('input');
            isMainCheckbox.type = 'checkbox';
            isMainCheckbox.name = `EditProductDto.Details[${detailIndex}].IsMain`;
            isMainCheckbox.value = "true";

            // Add hidden field to send false when checkbox is unchecked
            var hiddenIsMain = document.createElement('input');
            hiddenIsMain.type = 'hidden';
            hiddenIsMain.name = `EditProductDto.Details[${detailIndex}].IsMain`;
            hiddenIsMain.value = "false";

            // Create labels for inputs
            var keyLabel = document.createElement('label');
            keyLabel.textContent = 'Key:';

            var valueLabel = document.createElement('label');
            valueLabel.textContent = 'Value:';

            var isMainLabel = document.createElement('label');
            isMainLabel.textContent = 'Is Main:';

            // Append all elements to their respective divs
            var keyDiv = document.createElement('div');
            keyDiv.classList.add('form-group');
            keyDiv.appendChild(keyLabel);
            keyDiv.appendChild(keyInput);

            var valueDiv = document.createElement('div');
            valueDiv.classList.add('form-group');
            valueDiv.appendChild(valueLabel);
            valueDiv.appendChild(valueInput);

            var isMainDiv = document.createElement('div');
            isMainDiv.classList.add('form-group');
            isMainDiv.appendChild(isMainLabel);
            isMainDiv.appendChild(isMainCheckbox);
            isMainDiv.appendChild(hiddenIsMain);

            // Append the ID input to the detail container
            detailContainer.appendChild(idInput);
            // Append the groups to the main detail container
            detailContainer.appendChild(keyDiv);
            detailContainer.appendChild(valueDiv);
            detailContainer.appendChild(isMainDiv);

            // Append the new detail container to the product details section
            document.getElementById('productDetailsContainer').appendChild(detailContainer);
        });

        // Event listener for delete buttons
        document.querySelectorAll('.delete-detail-button').forEach(button => {
            button.addEventListener('click', function () {
                const detailId = this.getAttribute('data-detail-id');
                if (confirm('Are you sure you want to delete this detail?')) {
                    document.getElementById('deleteDetailId').value = detailId;
                    document.getElementById('deleteDetailForm').submit();
                }
            });
        });

        // Function to populate subcategories dynamically (Add your logic here)
        function populateSubcategories() {
            // Logic to populate subcategories based on selected category
        }
    </script>
}
